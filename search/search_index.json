{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BlockIndex Documentation Welcome to the official documentation for BlockIndex. BlockIndex a highly flexible open source indexer that aims to work with all blockchains. Our core codebase is free and publicly available on GitHub. Getting Started If you're new to BlockIndex, you can start here. Installation Alert Developers","title":"BlockIndex Documentation"},{"location":"#blockindex-documentation","text":"Welcome to the official documentation for BlockIndex. BlockIndex a highly flexible open source indexer that aims to work with all blockchains. Our core codebase is free and publicly available on GitHub.","title":"BlockIndex Documentation"},{"location":"#getting-started","text":"If you're new to BlockIndex, you can start here. Installation Alert Developers","title":"Getting Started"},{"location":"alert/","text":"Alert AlertTask Each AlertTask has its own set of user-defined criteria and monitors the most recent blockchain update. If any transactions or events fit the requirements, the AlertTask will send a webhook to the previously specified target url. For example, one can listen to ERC20 transactions for a specific address, and if any of the ERC20 transactions has a dollar value greater than $1,000 USD, the AlertTask will send an alert. How to create an AlertTask An AlertTask can be created by sending a post request to api/v1/alert_tasks with the following parameters. name type description type enum At the moment, Blockindex only supports the Event type, which allows AlertTask to listen for Blockchain events. index_addr_id id the IndexAddr model's id field cls_name enum Currently, Blockindex provides two distinct cls: ERC20TransAlert and ERC721TransAlert . In the following section, we will go into greater detail. params dict different cls require different parameters to establish their criteria. You may find the schema for different cls' parameters in /schemas/alert_task_params.py . We will also go into more detail in the following section. target_url url the url to which the webhook will send the request. AlertTask Class ERC20TransAlert ERC20TranAlert is used to monitor ERC20 transactions. name type description symbols List[str] List of symbols the alert listens to. value_threshold Optional[int] The threshold for sending alert. dollar_value_threshold Optional[int] The threshold for sending alert. * Note. Either one of the thresholds (value thresdhold or dollar value thresdhold) is met, the alert will be dispatched. Python post example headers = {\"access_token\": \"blockindex\"} data = { \"type\": \"Event\", \"index_addr_id\": 6, \"cls_name\": \"ERC20TransAlert\", \"params\": { \"symbols\": [\"ETH\", \"USDC\", \"USDT\"], \"dollar_value_threshold\": 1e4, }, \"target_url\": \"http://localhost:8080\" } requests.post(\"http://localhost:8000/api/v1/alert_tasks\", json=data, headers=headers) The alert is a POST request with the payload, which is essentially the relevant event data, as shown below. {\"data\": {\"args\": { \"from\": \"0x80985910b333c8B0698e5FA7C43f77a40b3235c3\", \"to\": \"0x562680a4dC50ed2f14d75BF31f494cfE0b8D10a1\", \"value\": 114002361 }, \"event\": \"Transfer\", \"logIndex\": 51, \"transactionIndex\": 11, \"transactionHash\": \"0xde9cc1ec6e3d143ae16279e85555957a6aef5258291f6116cc5eb10207571633\", \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", \"blockHash\": \"0x7b01fa30affa04220d928f27475769520b17deaa72ea66f1961610cba12cc9ea\", \"blockNumber\": 16262893 } } ERC721TransAlert ERC721TranAlert is used to monitor ERC721 transactions. name type description names List[str] List of ERC721 name Python post example headers = {\"access_token\": \"blockindex\"} data = { \"type\": \"Event\", \"index_addr_id\": 1, \"cls_name\": \"ERC721TransAlert\", \"params\": { \"names\": [\"BoredApeYachtClub\"] }, \"target_url\": \"http://localhost:8080\" } requests.post(\"http://localhost:8000/api/v1/alert_tasks\", json=data, headers=headers) The alert is a POST request with the payload, which is essentially the relevant event data, as shown below. { 'args': { 'from': '0xDBfD76AF2157Dc15eE4e57F3f942bB45Ba84aF24', 'to': '0x66aB6D9362d4F35596279692F0251Db635165871', 'tokenId': 4645 }, 'event': 'Transfer', 'logIndex': 1, 'transactionIndex': 0, 'transactionHash': '0x09cddab1cb9014ce3974dc366b52732a5b25aa0d41971ff4ad0e6eea2f055e2e', 'address': '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D', 'blockHash': '0x69d7b8162d082779ebb2efc313b19a0c3d6fa6ccfce99bf876219679f3f968d3', 'blockNumber': 16267740 }","title":"Alert"},{"location":"alert/#alert","text":"","title":"Alert"},{"location":"alert/#alerttask","text":"Each AlertTask has its own set of user-defined criteria and monitors the most recent blockchain update. If any transactions or events fit the requirements, the AlertTask will send a webhook to the previously specified target url. For example, one can listen to ERC20 transactions for a specific address, and if any of the ERC20 transactions has a dollar value greater than $1,000 USD, the AlertTask will send an alert.","title":"AlertTask"},{"location":"alert/#how-to-create-an-alerttask","text":"An AlertTask can be created by sending a post request to api/v1/alert_tasks with the following parameters. name type description type enum At the moment, Blockindex only supports the Event type, which allows AlertTask to listen for Blockchain events. index_addr_id id the IndexAddr model's id field cls_name enum Currently, Blockindex provides two distinct cls: ERC20TransAlert and ERC721TransAlert . In the following section, we will go into greater detail. params dict different cls require different parameters to establish their criteria. You may find the schema for different cls' parameters in /schemas/alert_task_params.py . We will also go into more detail in the following section. target_url url the url to which the webhook will send the request.","title":"How to create an AlertTask"},{"location":"alert/#alerttask-class","text":"","title":"AlertTask Class"},{"location":"alert/#erc20transalert","text":"ERC20TranAlert is used to monitor ERC20 transactions. name type description symbols List[str] List of symbols the alert listens to. value_threshold Optional[int] The threshold for sending alert. dollar_value_threshold Optional[int] The threshold for sending alert. * Note. Either one of the thresholds (value thresdhold or dollar value thresdhold) is met, the alert will be dispatched.","title":"ERC20TransAlert"},{"location":"alert/#python-post-example","text":"headers = {\"access_token\": \"blockindex\"} data = { \"type\": \"Event\", \"index_addr_id\": 6, \"cls_name\": \"ERC20TransAlert\", \"params\": { \"symbols\": [\"ETH\", \"USDC\", \"USDT\"], \"dollar_value_threshold\": 1e4, }, \"target_url\": \"http://localhost:8080\" } requests.post(\"http://localhost:8000/api/v1/alert_tasks\", json=data, headers=headers)","title":"Python post example"},{"location":"alert/#the-alert-is-a-post-request-with-the-payload-which-is-essentially-the-relevant-event-data-as-shown-below","text":"{\"data\": {\"args\": { \"from\": \"0x80985910b333c8B0698e5FA7C43f77a40b3235c3\", \"to\": \"0x562680a4dC50ed2f14d75BF31f494cfE0b8D10a1\", \"value\": 114002361 }, \"event\": \"Transfer\", \"logIndex\": 51, \"transactionIndex\": 11, \"transactionHash\": \"0xde9cc1ec6e3d143ae16279e85555957a6aef5258291f6116cc5eb10207571633\", \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", \"blockHash\": \"0x7b01fa30affa04220d928f27475769520b17deaa72ea66f1961610cba12cc9ea\", \"blockNumber\": 16262893 } }","title":"The alert is a POST request with the payload, which is essentially the relevant event data, as shown below."},{"location":"alert/#erc721transalert","text":"ERC721TranAlert is used to monitor ERC721 transactions. name type description names List[str] List of ERC721 name","title":"ERC721TransAlert"},{"location":"alert/#python-post-example_1","text":"headers = {\"access_token\": \"blockindex\"} data = { \"type\": \"Event\", \"index_addr_id\": 1, \"cls_name\": \"ERC721TransAlert\", \"params\": { \"names\": [\"BoredApeYachtClub\"] }, \"target_url\": \"http://localhost:8080\" } requests.post(\"http://localhost:8000/api/v1/alert_tasks\", json=data, headers=headers)","title":"Python post example"},{"location":"alert/#the-alert-is-a-post-request-with-the-payload-which-is-essentially-the-relevant-event-data-as-shown-below_1","text":"{ 'args': { 'from': '0xDBfD76AF2157Dc15eE4e57F3f942bB45Ba84aF24', 'to': '0x66aB6D9362d4F35596279692F0251Db635165871', 'tokenId': 4645 }, 'event': 'Transfer', 'logIndex': 1, 'transactionIndex': 0, 'transactionHash': '0x09cddab1cb9014ce3974dc366b52732a5b25aa0d41971ff4ad0e6eea2f055e2e', 'address': '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D', 'blockHash': '0x69d7b8162d082779ebb2efc313b19a0c3d6fa6ccfce99bf876219679f3f968d3', 'blockNumber': 16267740 }","title":"The alert is a POST request with the payload, which is essentially the relevant event data, as shown below."},{"location":"developers/","text":"Developers How to create a new EventIndexer We take ERC20 as an example. 1. Add model: Add erc20_trans.py under app/model/ from .event_indexer import EventIndexer class ERC20Trans(EventIndexer): # 1. The model should inherit EventIndexer # 2. Should always add these 2 lines below, # so BlockIndex can auto index the relationship with transactions __mapper_args__ = dict(polymorphic_identity=\"erc20trans\") id = Column(Integer, ForeignKey(EventIndexer.id), primary_key=True) # 3. Add your other fields in the following... from_addr = Column(String, index=True) to_addr = Column(String, index=True) ... And do migration by running - make makemigrations MESSAGE=\"message about the new indexer\" - make migrate 2. Add schema: Add erc20_trans.py under app/schemas/ from .event_indexer import EventIndexerBase class ERC20TransBase(EventIndexerBase): # The model should inherit EventIndexerBase from_addr: Optional[str] = None to_addr: Optional[str] = None 3. Add crud and endpoint. The crud and endpoint parts require no special work. You can handle it in the same way that you would a regular table. 4. Add indexer Add erc20_trans_indexer.py under app/indexer/ from app.indexer import EventIndexerBasic class ERC20TransIndexer(EventIndexerBasic): abi = [...] # you need to add the abi def _index_event(db: Session, event: Dict[str, Any], block: Dict[str, Any]): # You must also implement how to save event data into the model here. And return the model obj. !! Please add ERC20TransIndexer inside app/indexer/__init__.py as follows, or it cannot be found via BasicIndexer. subclasses () from .erc20_trans_indexer import ERC20TransIndexer Then, when you run the rpc listener, your newly created model should be automatically indexed/updated. More information can be found in these files mentioned above. How to create a new Alert Here we try to build a erc20 transaction alert as an example. 1. Add ERC20TransAlertParams under app/schemas/alert_task_params ... class ERC20TransAlertParams(BaseModel): symbols: List[str] = [] value_threshold: Optional[int] = 0 ... Add newly created alert module inside app/alert/__init__.py from .erc20_trans_alert import ERC20TransAlert Add erc20_trans_alert.py under app/alert/ , and implement abi, params_schema, and check function Usually, you return the params defined under app/schemas/alert_task_params in the params_schema function. ```python class ERC20TransAlert(EventAlertBase): abi = ERC20_ABI @property def params_schema(self) -> Type[ERC20TransAlertParams]: return ERC20TransAlertParams def check(self, index_addr: IndexAddr, event: EventData, params: ERC20TransAlertParams) -> bool: # Define the situation under which the alert will be sent. # Return True if the requirement is met. ... ``` Update AlertClsName under app/models/alert_task class AlertClsName(str, enum.Enum): ERC20TransAlert = \"ERC20TransAlert\" ERC721TransAlert = \"ERC721TransAlert\" ...","title":"Developers"},{"location":"developers/#developers","text":"","title":"Developers"},{"location":"developers/#how-to-create-a-new-eventindexer","text":"We take ERC20 as an example.","title":"How to create a new EventIndexer"},{"location":"developers/#1-add-model","text":"Add erc20_trans.py under app/model/ from .event_indexer import EventIndexer class ERC20Trans(EventIndexer): # 1. The model should inherit EventIndexer # 2. Should always add these 2 lines below, # so BlockIndex can auto index the relationship with transactions __mapper_args__ = dict(polymorphic_identity=\"erc20trans\") id = Column(Integer, ForeignKey(EventIndexer.id), primary_key=True) # 3. Add your other fields in the following... from_addr = Column(String, index=True) to_addr = Column(String, index=True) ... And do migration by running - make makemigrations MESSAGE=\"message about the new indexer\" - make migrate","title":"1. Add model:"},{"location":"developers/#2-add-schema","text":"Add erc20_trans.py under app/schemas/ from .event_indexer import EventIndexerBase class ERC20TransBase(EventIndexerBase): # The model should inherit EventIndexerBase from_addr: Optional[str] = None to_addr: Optional[str] = None","title":"2. Add schema:"},{"location":"developers/#3-add-crud-and-endpoint","text":"The crud and endpoint parts require no special work. You can handle it in the same way that you would a regular table.","title":"3. Add crud and endpoint."},{"location":"developers/#4-add-indexer","text":"Add erc20_trans_indexer.py under app/indexer/ from app.indexer import EventIndexerBasic class ERC20TransIndexer(EventIndexerBasic): abi = [...] # you need to add the abi def _index_event(db: Session, event: Dict[str, Any], block: Dict[str, Any]): # You must also implement how to save event data into the model here. And return the model obj. !! Please add ERC20TransIndexer inside app/indexer/__init__.py as follows, or it cannot be found via BasicIndexer. subclasses () from .erc20_trans_indexer import ERC20TransIndexer Then, when you run the rpc listener, your newly created model should be automatically indexed/updated. More information can be found in these files mentioned above.","title":"4. Add indexer"},{"location":"developers/#how-to-create-a-new-alert","text":"Here we try to build a erc20 transaction alert as an example. 1. Add ERC20TransAlertParams under app/schemas/alert_task_params ... class ERC20TransAlertParams(BaseModel): symbols: List[str] = [] value_threshold: Optional[int] = 0 ... Add newly created alert module inside app/alert/__init__.py from .erc20_trans_alert import ERC20TransAlert Add erc20_trans_alert.py under app/alert/ , and implement abi, params_schema, and check function Usually, you return the params defined under app/schemas/alert_task_params in the params_schema function. ```python class ERC20TransAlert(EventAlertBase): abi = ERC20_ABI @property def params_schema(self) -> Type[ERC20TransAlertParams]: return ERC20TransAlertParams def check(self, index_addr: IndexAddr, event: EventData, params: ERC20TransAlertParams) -> bool: # Define the situation under which the alert will be sent. # Return True if the requirement is met. ... ``` Update AlertClsName under app/models/alert_task class AlertClsName(str, enum.Enum): ERC20TransAlert = \"ERC20TransAlert\" ERC721TransAlert = \"ERC721TransAlert\" ...","title":"How to create a new Alert"},{"location":"installation/","text":"Installation","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"}]}